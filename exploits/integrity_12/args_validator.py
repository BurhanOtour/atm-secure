#!/usr/bin/python3

import re
import sys
import argparse
from decimal import Decimal

class ArgsValidator(argparse.ArgumentParser):
    def __init__(self, caller):
        super(ArgsValidator, self).__init__()
        self._caller = caller
        self._action = ''
        self._params = {}


    def error(self, message):
        raise SystemExit(255)


    def validate_duplicate_actions(self):
        actions_count = 0; arguments = self.parse_args()

        # initial_balance
        initial_balance = arguments.initial_balance
        if initial_balance:
            self.validate_amount(initial_balance)
            self._params.update({ 'initial_balance': initial_balance })
            self._action = 'create_account'; actions_count += 1

        # deposit_amount
        deposit_amount = arguments.deposit_amount
        if deposit_amount:
            self.validate_amount(deposit_amount)
            self._params.update({ 'deposit_amount': deposit_amount })
            self._action = 'deposit_amount'; actions_count += 1

        # withdraw_amount
        withdraw_amount = arguments.withdraw_amount
        if withdraw_amount:
            self.validate_amount(withdraw_amount)
            self._params.update({ 'withdraw_amount': withdraw_amount })
            self._action = 'withdraw_amount'; actions_count += 1

        # check_balance
        is_check_balance = arguments.g
        if is_check_balance:
            self._action = 'check_balance'; actions_count += 1

        if actions_count != 1:
            raise SystemExit(255)


    def set_parser_arguments(self):
        self.add_argument('-p', action='store', dest='port')
        self.add_argument('-s', action='store', dest='auth_file')

        if self._caller == 'ATM':
            self.add_argument('-i', action='store', dest='ip_address')
            self.add_argument('-c', action='store', dest='card_file')
            self.add_argument('-a', action='store', dest='account')
            self.add_argument('-n', action='store', dest='initial_balance')
            self.add_argument('-d', action='store', dest='deposit_amount')
            self.add_argument('-w', action='store', dest='withdraw_amount')
            self.add_argument('-g', action='store_true', default=0)


    def validate_file_name(self, file_name):
        if file_name == '.' or file_name == '..':
            raise SystemExit(255)

        if not (re.match(r'^([_\-\.0-9a-z]+)$', file_name) and 0 < len(file_name) < 128):
            raise SystemExit(255)


    def validate_account_name(self, account_name):
        if account_name == '.' or account_name == '..':
            return

        if not account_name:
            raise SystemExit(255)

        if not (re.match(r'^([_\-\.0-9a-z]+)$', account_name) and 0 < len(account_name) < 123):
            raise SystemExit(255)


    def validate_amount(self, amount):
        if not re.match(r'^([0-9]|[1-9]+[0-9]*)(\.[0-9]{2})+$', amount):
            raise SystemExit(255)

        money = Decimal(amount)

        if money <= 0 or money > Decimal('4294967295.99'):
            raise SystemExit(255)


    def validate_ip_address(self, ip_address):
        if not re.match(r'^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$', ip_address):
            raise SystemExit(255)


    def validate_port(self, port):
        if not re.match(r'^(102[4-9]|10[3-9]\d|1[1-9]\d{2}|[2-9]\d{3}|[1-5]\d{4}|6[0-4]\d{3}|65[0-4]\d{2}|655[0-2]\d|6553[0-5])$', port):
            raise SystemExit(255)


    def get_args(self):
        # checking if args are unique i.e -s can't come twice in args
        if sys.argv.count('-i') > 1 or sys.argv.count('-p') > 1 or sys.argv.count('-s') > 1 or sys.argv.count('-a') > 1 or sys.argv.count('-c') > 1 or sys.argv.count('-n') > 1 or sys.argv.count('-d') > 1 or sys.argv.count('-w') > 1 or sys.argv.count('-g') > 1 or sys.argv.count('-ga') > 1:
            raise SystemExit(255)

        # Set list of available arguments
        self.set_parser_arguments()
        arguments = self.parse_args()

        # port
        port = arguments.port
        if port:
            self.validate_port(port)
        else:
            port = 3000
        self._params.update({ 'port': port })

        # auth_file
        auth_file = arguments.auth_file
        if auth_file:
            self.validate_file_name(auth_file)
        else:
            auth_file = 'bank.auth'
        self._params.update({ 'auth_file': auth_file })


        if self._caller == 'ATM':
            # Validate if no action is specified or more than one action is specified
            self.validate_duplicate_actions()

            # ip_address
            ip_address = arguments.ip_address
            if ip_address:
                self.validate_ip_address(ip_address)
            else:
                ip_address = '127.0.0.1'
            self._params.update({ 'ip_address': ip_address })

            # account
            account = arguments.account
            self.validate_account_name(account)
            self._params.update({ 'account': account })

            # card_file
            card_file = arguments.card_file
            if card_file:
                self.validate_file_name(card_file)
            else:
                card_file = '%s.card' % account
            self._params.update({ 'card_file': card_file })

        return { 'action': self._action, 'params': self._params }
