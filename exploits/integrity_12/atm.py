#!/usr/bin/python3

import ssl
import socket
import os.path
from decimal import Decimal
from utility import generate_random_secret, read_from_file, write_to_file
from args_validator import ArgsValidator

class Atm:
    def __init__(self, ip, port, auth_file):
        self._ip = ip
        self._port = port

        # Check if auth_file exits.
        if not os.path.isfile(auth_file):
            raise SystemExit(255)

        # Read authentication token from auth_file
        self._auth_token = read_from_file(auth_file)


    def send_request(self, action, account, card_secret, amount='0.00'):
        try:
            # Message to send
            message = { 'action': action, 'auth_token': self._auth_token, 'account': account, 'card_secret': card_secret, 'amount': amount }

            # Create a TCP/IP socket and ssl context
            socket.setdefaulttimeout(10)
            sock = socket.socket(socket.AF_INET)
            context = ssl.create_default_context(ssl.Purpose.SERVER_AUTH)
            context.check_hostname = 0
            context.verify_mode = ssl.CERT_NONE
            connection = context.wrap_socket(sock, server_hostname=self._ip)

            # Connect to server/bank
            connection.connect((self._ip, self._port))
            connection.write(str(message).encode())
            response = connection.recv().decode()

            if response == '' or response == 'rejected':
                raise SystemExit(255)
            else:
                print(response, flush=1)

        except socket.error:
            raise SystemExit(63)
        except Exception:
            raise SystemExit(255)
        finally:
            connection.close()


    def get_card_secret(self, card_file):
        # Read card_secret from card_file, if it exists.
        if os.path.isfile(card_file):
            return read_from_file(card_file)

        raise SystemExit(255)


    def create_account(self, account, card_file, initial_balance):
        # Check initial balance to be greater or equal to 10
        if Decimal(initial_balance) < 10:
           raise SystemExit(255)

        # Check if card_file exits.
        if os.path.isfile(card_file):
            raise SystemExit(255)

        card_secret = generate_random_secret()

        self.send_request('create_account', account, card_secret, initial_balance)

        # Save new card_file
        write_to_file(card_file, card_secret)


    def deposit_amount(self, account, card_file, deposit_amount):
        card_secret = self.get_card_secret(card_file)  
        self.send_request('deposit_amount', account, card_secret, deposit_amount)


    def check_balance(self, account, card_file):
        card_secret = self.get_card_secret(card_file)
        self.send_request('check_balance', account, card_secret)


    def withdraw_amount(self, account, card_file, withdraw_amount):
        card_secret = self.get_card_secret(card_file)
        self.send_request('withdraw_amount', account, card_secret, withdraw_amount)


if __name__ == '__main__':
    # Validate all command-line arguments 
    args = ArgsValidator('ATM').get_args()

    action = args.get('action')
    params = args.get('params')
    ip = params.get('ip_address')
    port = int(params.get('port'))
    auth_file = params.get('auth_file')

    atm = Atm(ip, port, auth_file)

    # Create new account
    if action == 'create_account':
        atm.create_account(params.get('account'), params.get('card_file'), params.get('initial_balance'))

    # Deposite amount to an existing account
    elif action == 'deposit_amount':
        atm.deposit_amount(params.get('account'), params.get('card_file'), params.get('deposit_amount'))

    # Withdraw amount from an existing account
    elif action == 'withdraw_amount':
        atm.withdraw_amount(params.get('account'), params.get('card_file'), params.get('withdraw_amount'))

    # Check current balance of an existing account
    elif action == 'check_balance':
        atm.check_balance(params.get('account'), params.get('card_file'))
